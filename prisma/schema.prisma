// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  SELLER
  INFLUENCER
  ADMIN
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  bannerImage String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([productId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole        @default(CUSTOMER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  preferences   UserPreference?

  // Profile information
  bio      String? @db.Text
  phone    String?
  location String?

  // Role-specific fields
  isOnboarded Boolean @default(false)

  // Relations
  accounts Account[]
  sessions Session[]

  // Seller-specific relations
  products Product[] @relation("SellerProducts")

  // Customer-specific relations
  orders    Order[]
  wishlist  Wishlist?
  cartItems CartItem[]

  // Common relations
  reviews Review[]
}

model Product {
  id                 String         @id @default(cuid())
  name               String         // Fixed typo "Strinyg" to "String"
  description        String?        @db.Text
  price              Float
  discountPercentage Float          @default(0)
  images             Json           // Array of image URLs
  stock              Int            @default(0)
  rating             Float          @default(0)
  reviewCount        Int            @default(0)
  viewCount          Int            @default(0)
  sellerId           String
  categoryId         String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  seller        User           @relation("SellerProducts", fields: [sellerId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  @@index([sellerId])
  @@index([categoryId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  status    String
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  categories    String[] @default([])
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  location      String   @default("Kolkata")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]
}
