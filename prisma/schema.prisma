// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  SELLER
  INFLUENCER
  ADMIN
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  bannerImage String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([productId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole        @default(CUSTOMER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bio           String?         @db.Text
  phone         String?
  location      String?
  isOnboarded   Boolean         @default(false)

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  products      Product[]       @relation("SellerProducts")
  reviews       Review[]
  wishlist      Wishlist?
  cartItems     CartItem[]
  preferences   UserPreference?
  sellerProfile SellerProfile?
  addresses     Address[]
  reels       Reel[]
  reelLikes   ReelLike[]
  reelComments ReelComment[]
}

model Product {
  id                 String         @id @default(cuid())
  name               String
  description        String?        @db.Text
  price              Float
  discountPercentage Float          @default(0)
  images             Json           // Array of image URLs
  stock              Int            @default(0)
  rating             Float          @default(0)
  reviewCount        Int            @default(0)
  viewCount          Int            @default(0)
  sellerId           String
  categoryId         String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  cloudinaryPublicId String?        // Added for Cloudinary integration

  seller        User           @relation("SellerProducts", fields: [sellerId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  reels       Reel[]

  @@index([sellerId])
  @@index([categoryId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  categories    String[] @default([])
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  location      String   @default("Kolkata")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]
}

// New model for seller onboarding
enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model SellerProfile {
  id              String       @id @default(cuid())
  userId          String       @unique
  businessName    String
  businessType    String       // e.g., Individual, LLC, Corporation
  description     String?      @db.Text
  bannerImage     String?
  logoImage       String?
  address         String
  city            String
  state           String
  postalCode      String
  country         String
  taxId           String?
  website         String?
  phoneNumber     String
  categories      String[]     // Categories the seller operates in
  
  // KYC and verification fields
  identityDocument String?
  businessDocument String?
  isVerified      Boolean      @default(false)
  verifiedAt      DateTime?
  verifiedBy      String?      // Admin user ID who verified
  
  // Cloudinary public IDs for documents
  identityDocumentPublicId String?
  businessDocumentPublicId String?
  bannerImagePublicId     String?
  logoImagePublicId       String?
  
  // Status tracking
  status          SellerStatus @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Add these models to your schema
model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([userId])
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  addressId       String
  status          String    // PENDING, PAID, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  subtotal        Float
  discount        Float     @default(0)
  tax             Float     @default(0)
  shipping        Float     @default(0)
  total           Float
  paymentIntentId String?   @unique
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user    User         @relation(fields: [userId], references: [id])
  address Address      @relation(fields: [addressId], references: [id])
  items   OrderItem[]

  @@index([userId])
  @@index([addressId])
}

model OrderItem {
  id                 String   @id @default(cuid())
  orderId            String
  productId          String
  quantity           Int
  price              Float
  discountPercentage Float    @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}


// Add these models to your schema

model Reel {
  id               String    @id @default(cuid())
  videoUrl         String
  thumbnailUrl     String?
  videoPublicId    String?   // Add this field
  thumbnailPublicId String?  // Add this field
  caption          String?   @db.Text
  userId           String
  productId        String?
  views            Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product          Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  likes            ReelLike[]
  comments         ReelComment[]
  @@index([userId])
  @@index([productId])
}


model ReelLike {
  id        String   @id @default(cuid())
  reelId    String
  userId    String
  createdAt DateTime @default(now())

  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reelId, userId])
  @@index([reelId])
  @@index([userId])
}

model ReelComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  reelId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reel      Reel     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reelId])
  @@index([userId])
}

